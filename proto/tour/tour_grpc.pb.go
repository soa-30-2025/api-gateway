// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: tour/tour.proto

package tour

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TourService_CreateTour_FullMethodName       = "/tour.TourService/CreateTour"
	TourService_GetToursByAuthor_FullMethodName = "/tour.TourService/GetToursByAuthor"
	TourService_GetTour_FullMethodName          = "/tour.TourService/GetTour"
	TourService_GetAllTours_FullMethodName      = "/tour.TourService/GetAllTours"
	TourService_CreateReview_FullMethodName     = "/tour.TourService/CreateReview"
	TourService_UpdateTour_FullMethodName       = "/tour.TourService/UpdateTour"
	TourService_GetReviewsByTour_FullMethodName = "/tour.TourService/GetReviewsByTour"
	TourService_AddKeypoint_FullMethodName      = "/tour.TourService/AddKeypoint"
	TourService_GetKeypointImage_FullMethodName = "/tour.TourService/GetKeypointImage"
	TourService_ReorderKeypoints_FullMethodName = "/tour.TourService/ReorderKeypoints"
	TourService_UpdateKeypoint_FullMethodName   = "/tour.TourService/UpdateKeypoint"
	TourService_DeleteKeypoint_FullMethodName   = "/tour.TourService/DeleteKeypoint"
)

// TourServiceClient is the client API for TourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourServiceClient interface {
	CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*CreateTourResponse, error)
	GetToursByAuthor(ctx context.Context, in *GetToursByAuthorRequest, opts ...grpc.CallOption) (*GetToursByAuthorResponse, error)
	GetTour(ctx context.Context, in *GetTourRequest, opts ...grpc.CallOption) (*GetTourResponse, error)
	GetAllTours(ctx context.Context, in *GetAllToursRequest, opts ...grpc.CallOption) (*GetAllToursResponse, error)
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error)
	UpdateTour(ctx context.Context, in *UpdateTourRequest, opts ...grpc.CallOption) (*UpdateTourResponse, error)
	GetReviewsByTour(ctx context.Context, in *GetReviewsByTourRequest, opts ...grpc.CallOption) (*GetReviewsByTourResponse, error)
	AddKeypoint(ctx context.Context, in *AddKeypointRequest, opts ...grpc.CallOption) (*AddKeypointResponse, error)
	GetKeypointImage(ctx context.Context, in *GetKeypointImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageChunk], error)
	ReorderKeypoints(ctx context.Context, in *ReorderKeypointsRequest, opts ...grpc.CallOption) (*ReorderKeypointsResponse, error)
	UpdateKeypoint(ctx context.Context, in *UpdateKeypointRequest, opts ...grpc.CallOption) (*UpdateKeypointResponse, error)
	DeleteKeypoint(ctx context.Context, in *DeleteKeypointRequest, opts ...grpc.CallOption) (*DeleteKeypointResponse, error)
}

type tourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourServiceClient(cc grpc.ClientConnInterface) TourServiceClient {
	return &tourServiceClient{cc}
}

func (c *tourServiceClient) CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*CreateTourResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTourResponse)
	err := c.cc.Invoke(ctx, TourService_CreateTour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetToursByAuthor(ctx context.Context, in *GetToursByAuthorRequest, opts ...grpc.CallOption) (*GetToursByAuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetToursByAuthorResponse)
	err := c.cc.Invoke(ctx, TourService_GetToursByAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetTour(ctx context.Context, in *GetTourRequest, opts ...grpc.CallOption) (*GetTourResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTourResponse)
	err := c.cc.Invoke(ctx, TourService_GetTour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetAllTours(ctx context.Context, in *GetAllToursRequest, opts ...grpc.CallOption) (*GetAllToursResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllToursResponse)
	err := c.cc.Invoke(ctx, TourService_GetAllTours_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReviewResponse)
	err := c.cc.Invoke(ctx, TourService_CreateReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateTour(ctx context.Context, in *UpdateTourRequest, opts ...grpc.CallOption) (*UpdateTourResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTourResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateTour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetReviewsByTour(ctx context.Context, in *GetReviewsByTourRequest, opts ...grpc.CallOption) (*GetReviewsByTourResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReviewsByTourResponse)
	err := c.cc.Invoke(ctx, TourService_GetReviewsByTour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) AddKeypoint(ctx context.Context, in *AddKeypointRequest, opts ...grpc.CallOption) (*AddKeypointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddKeypointResponse)
	err := c.cc.Invoke(ctx, TourService_AddKeypoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetKeypointImage(ctx context.Context, in *GetKeypointImageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TourService_ServiceDesc.Streams[0], TourService_GetKeypointImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetKeypointImageRequest, ImageChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TourService_GetKeypointImageClient = grpc.ServerStreamingClient[ImageChunk]

func (c *tourServiceClient) ReorderKeypoints(ctx context.Context, in *ReorderKeypointsRequest, opts ...grpc.CallOption) (*ReorderKeypointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReorderKeypointsResponse)
	err := c.cc.Invoke(ctx, TourService_ReorderKeypoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateKeypoint(ctx context.Context, in *UpdateKeypointRequest, opts ...grpc.CallOption) (*UpdateKeypointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKeypointResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateKeypoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) DeleteKeypoint(ctx context.Context, in *DeleteKeypointRequest, opts ...grpc.CallOption) (*DeleteKeypointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKeypointResponse)
	err := c.cc.Invoke(ctx, TourService_DeleteKeypoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServiceServer is the server API for TourService service.
// All implementations must embed UnimplementedTourServiceServer
// for forward compatibility.
type TourServiceServer interface {
	CreateTour(context.Context, *CreateTourRequest) (*CreateTourResponse, error)
	GetToursByAuthor(context.Context, *GetToursByAuthorRequest) (*GetToursByAuthorResponse, error)
	GetTour(context.Context, *GetTourRequest) (*GetTourResponse, error)
	GetAllTours(context.Context, *GetAllToursRequest) (*GetAllToursResponse, error)
	CreateReview(context.Context, *CreateReviewRequest) (*CreateReviewResponse, error)
	UpdateTour(context.Context, *UpdateTourRequest) (*UpdateTourResponse, error)
	GetReviewsByTour(context.Context, *GetReviewsByTourRequest) (*GetReviewsByTourResponse, error)
	AddKeypoint(context.Context, *AddKeypointRequest) (*AddKeypointResponse, error)
	GetKeypointImage(*GetKeypointImageRequest, grpc.ServerStreamingServer[ImageChunk]) error
	ReorderKeypoints(context.Context, *ReorderKeypointsRequest) (*ReorderKeypointsResponse, error)
	UpdateKeypoint(context.Context, *UpdateKeypointRequest) (*UpdateKeypointResponse, error)
	DeleteKeypoint(context.Context, *DeleteKeypointRequest) (*DeleteKeypointResponse, error)
	mustEmbedUnimplementedTourServiceServer()
}

// UnimplementedTourServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTourServiceServer struct{}

func (UnimplementedTourServiceServer) CreateTour(context.Context, *CreateTourRequest) (*CreateTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedTourServiceServer) GetToursByAuthor(context.Context, *GetToursByAuthorRequest) (*GetToursByAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToursByAuthor not implemented")
}
func (UnimplementedTourServiceServer) GetTour(context.Context, *GetTourRequest) (*GetTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTour not implemented")
}
func (UnimplementedTourServiceServer) GetAllTours(context.Context, *GetAllToursRequest) (*GetAllToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTours not implemented")
}
func (UnimplementedTourServiceServer) CreateReview(context.Context, *CreateReviewRequest) (*CreateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedTourServiceServer) UpdateTour(context.Context, *UpdateTourRequest) (*UpdateTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedTourServiceServer) GetReviewsByTour(context.Context, *GetReviewsByTourRequest) (*GetReviewsByTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsByTour not implemented")
}
func (UnimplementedTourServiceServer) AddKeypoint(context.Context, *AddKeypointRequest) (*AddKeypointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeypoint not implemented")
}
func (UnimplementedTourServiceServer) GetKeypointImage(*GetKeypointImageRequest, grpc.ServerStreamingServer[ImageChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetKeypointImage not implemented")
}
func (UnimplementedTourServiceServer) ReorderKeypoints(context.Context, *ReorderKeypointsRequest) (*ReorderKeypointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderKeypoints not implemented")
}
func (UnimplementedTourServiceServer) UpdateKeypoint(context.Context, *UpdateKeypointRequest) (*UpdateKeypointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeypoint not implemented")
}
func (UnimplementedTourServiceServer) DeleteKeypoint(context.Context, *DeleteKeypointRequest) (*DeleteKeypointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeypoint not implemented")
}
func (UnimplementedTourServiceServer) mustEmbedUnimplementedTourServiceServer() {}
func (UnimplementedTourServiceServer) testEmbeddedByValue()                     {}

// UnsafeTourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServiceServer will
// result in compilation errors.
type UnsafeTourServiceServer interface {
	mustEmbedUnimplementedTourServiceServer()
}

func RegisterTourServiceServer(s grpc.ServiceRegistrar, srv TourServiceServer) {
	// If the following call pancis, it indicates UnimplementedTourServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TourService_ServiceDesc, srv)
}

func _TourService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateTour(ctx, req.(*CreateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetToursByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToursByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetToursByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetToursByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetToursByAuthor(ctx, req.(*GetToursByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetTour(ctx, req.(*GetTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetAllTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllToursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetAllTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetAllTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetAllTours(ctx, req.(*GetAllToursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateTour(ctx, req.(*UpdateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetReviewsByTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsByTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetReviewsByTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetReviewsByTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetReviewsByTour(ctx, req.(*GetReviewsByTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_AddKeypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeypointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).AddKeypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_AddKeypoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).AddKeypoint(ctx, req.(*AddKeypointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetKeypointImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetKeypointImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TourServiceServer).GetKeypointImage(m, &grpc.GenericServerStream[GetKeypointImageRequest, ImageChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TourService_GetKeypointImageServer = grpc.ServerStreamingServer[ImageChunk]

func _TourService_ReorderKeypoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderKeypointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).ReorderKeypoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_ReorderKeypoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).ReorderKeypoints(ctx, req.(*ReorderKeypointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateKeypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeypointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateKeypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateKeypoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateKeypoint(ctx, req.(*UpdateKeypointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_DeleteKeypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeypointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).DeleteKeypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_DeleteKeypoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).DeleteKeypoint(ctx, req.(*DeleteKeypointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TourService_ServiceDesc is the grpc.ServiceDesc for TourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tour.TourService",
	HandlerType: (*TourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTour",
			Handler:    _TourService_CreateTour_Handler,
		},
		{
			MethodName: "GetToursByAuthor",
			Handler:    _TourService_GetToursByAuthor_Handler,
		},
		{
			MethodName: "GetTour",
			Handler:    _TourService_GetTour_Handler,
		},
		{
			MethodName: "GetAllTours",
			Handler:    _TourService_GetAllTours_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _TourService_CreateReview_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _TourService_UpdateTour_Handler,
		},
		{
			MethodName: "GetReviewsByTour",
			Handler:    _TourService_GetReviewsByTour_Handler,
		},
		{
			MethodName: "AddKeypoint",
			Handler:    _TourService_AddKeypoint_Handler,
		},
		{
			MethodName: "ReorderKeypoints",
			Handler:    _TourService_ReorderKeypoints_Handler,
		},
		{
			MethodName: "UpdateKeypoint",
			Handler:    _TourService_UpdateKeypoint_Handler,
		},
		{
			MethodName: "DeleteKeypoint",
			Handler:    _TourService_DeleteKeypoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetKeypointImage",
			Handler:       _TourService_GetKeypointImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tour/tour.proto",
}
